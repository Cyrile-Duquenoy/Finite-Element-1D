// Parameters
verbosity = 0; //to remove all default output
real theta = 4.*pi/3.;
real a=1.; //the length of the semimajor axis
real b=1.; //the length of the semiminor axis
// ^ coeff pour manipuler la forme du domaine circulaire

int nn=100; // mesh quality 1D

func f = 2-x-y;//fonction du terme source 
real alpha=0;// coeff alpha du sujet 
real A=1;//coef a du sujet 
func phiexact = A*(2-x-y);//solution exacte 


// Domaine
/*
//domaine circulaire
border Gamma1(t=0., theta){x=a*cos(t); y=b*sin(t);}
border Gamma2(t=theta, 2.*pi){x=a*cos(t); y=b*sin(t);}
*/

//Domaine carré
/*
border Gamma1(t=0.,1.){x=t;y=0.;}
border Gamma2(t=1.,2.){x=1.;y=t-1;}
border Gamma3(t=2.,3.){x=1.-(t-2.);y=1;}
border Gamma4(t=3.,4.){x=0.;y=1.-(t-3.);}
*/



// Error loop
real[int] L2error(2); //an array of two values
for(int n = 0; n < 2; n++){
// Mesh
//mesh Th = buildmesh(Gamma1(20*(n+1)) + Gamma2(20*(n+1)));
  
//mesh Th = buildmesh(Gamma1(10*(n+1))+Gamma2(10*(n+1))+Gamma3(10*(n+1))+Gamma4(10*(n+1)));

mesh Th = square(nn, 1, [x, y/50]);//mesh 1D 

// Fespace
fespace Vh(Th, P2);
Vh phi, w;

// Solve
solve Laplace(phi, w)
= -int2d(Th)(dx(phi)*dx(w)+ dy(phi)*dy(w))//a(u,v)
+int2d(Th)(A*w)- int2d(Th)(f*w)// partie "classique" de l(v)
  
//- int1d(Th, Gamma1)(alpha*w)- int1d(Th, Gamma2)(alpha*w)//condition de bord pour le cercle 
//- int1d(Th, Gamma1)(alpha*w)- int1d(Th, Gamma2)(alpha*w)- int1d(Th, Gamma3)(alpha*w)- int1d(Th, Gamma4)(alpha*w)//condition de bord pour le carré
-int1d(Th,2)(alpha*w)-int1d(Th,4)(alpha*w)//condition de bord pour le cas 1d 
;

// Plot
plot(Th, phi, wait=true,fill=true, ps="membrane.eps");

// Error
L2error[n] = sqrt(int2d(Th)((phi-phiexact)^2));
}

// Display loop
for(int n = 0; n < 2; n++)
cout << "L2error " << n << " = " << L2error[n] << endl;

// Convergence rate
cout << "convergence rate = "<< log(L2error[0]/L2error[1])/log(2.) << endl;


	